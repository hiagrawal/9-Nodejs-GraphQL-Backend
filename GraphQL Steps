 
 - install graphql and express-graphql for defining graphql schema and handling graphql requests in express server:
   npm install --save graphql express-graphql


----------------------------------------------------------------------------------------------------

- Since in Graphql, we do not need routes. Instaed of Routes, we have query, mutations and subscriptions hence we can remove all
  code related to routes
- we need to install graphql and express-graphql
- graphql is required to define the schema of graphql services
- express-graphql will be required for parsing the incoming requests and hadling graphql in express server

-------------------------------------------------------------------------------------------------------------------------

Useful Link: https://graphql.org/ ,  https://graphql.org/code/#javascript

-----------------------------------------------------------------------------------------------------------------------

Implementation:

In Rest api, we have 'routes' and 'controllers'. 
Routes is used to define what request, which type of request, what data it needs to return
and controllers are used to define logic to return the requested data

now in graphql, we have 'schema' and 'resolvers'
Schema is used to define what request, which type of request, what data it needs to return
and resolvers are used to define logic to return the requested data

- Frontend always requests to the '/graphql' url only to query any data which will always be a 'POST' request.
POST request since it needs to send data what query it is lookig for and what data it needs

------------------------------------------------------------------------------------------------------------------

schema:

const { buildSchema } = require('graphql');

module.exports = buildSchema(`
  type TestData {
    text: String!
    views: Int!
  }

  type RootQuery {
    hello: TestData!
  }

  schema {
    query: RootQuery
  }

`);

resolvers:

module.exports = {
  hello() {
    return {
        text: 'Hello World',
        views: 12345
    }
}
}

app.js 

const {graphqlHTTP} = require('express-graphql');

const graphqlSchema = require('./graphql/schema');
const graphqlResolver = require('./graphql/resolvers');

app.use('/graphql', graphqlHTTP({
  schema: graphqlSchema,
  rootValue: graphqlResolver
}));

-------------------------------------------------------------------------------------------------------------

Now start the server and to test use POSTMAN: (USe desktop version when running on localhost, web version might not work)

type the url: http://localhost:8080/graphql, method 'POST' and in the body, raw, type json, define the query and what data it needs

{
  "query" : "{hello {text}}"
}

and can see the output

{
  "data": {
      "hello": {
          "text": "Hello World"
      }
  }
}

if want both then....

{
  "query" : "{hello {text views}}"
}

{
  "data": {
      "hello": {
          "text": "Hello World",
          "views": 12345
      }
  }
}

this way we can simply get the data what we want (text, views or both) from the same query and graphql express does the 
heavy lifting and returns the filtered out data

---------------------------------------------------------------------------------------------------------------------------

'query' is used to 'get' data, 'mutation' is used to 'post' data
so we used query to return the text and view filtered

now we want to create user from the frontend, send this data to backend which then save it in db and return the saved data
for this, we will use mutation which accepts input data

--------------------------------------------------------------------------------------------------------------------------------

to test graphql requests, we can use tool provided by graphql which can be accessed by setting 'graphiql' to true

app.use('/graphql', graphqlHTTP({
  schema: graphqlSchema,
  rootValue: graphqlResolver,
  graphiql: true
}));
//and hence used 'app.use' here so can access all get(query) and post(mutation) requests

after setting this, run the server and hit 'http://localhost:8080/graphql' 
this will provide us a playground to run querys, also can see all querys, mutations under Docs section at the right side

mutation{
  createUser(userInput: {email: "test@test.com", name: "Hina", password: "tester"}) {
    _id
    email
  }
}

and then hit play button to see the results

  {
    "data": {
      "createUser": {
        "_id": "618a3556aa3eae31cc02f307",
        "email": "test@test.com"
      }
    }
  }

-------------------------------------------------------------------------------------------------------------

Input validation
Eralier, we used to add validation logic as a middleware in routes but here since we dont have any such routes, 
we will add validation in resolvers.

for that, we need to install a package: 
tHis is a pkg that 'express-validator' pkg uses behind the scenes so now we are uisng it directly here
npm install --save validator

can apply validations which are almost same as we had in express validator and then can check in graphiql playground
by entering incorrect email without @ or entering short password

we get the result like this:
{
  "errors": [
    {
      "message": "Invalid Input",
      "locations": [
        {
          "line": 33,
          "column": 3
        }
      ],
      "path": [
        "createUser"
      ]
    }
  ],
  "data": null
}

------------------------------------------------------------------------------------------------------------------

formatting error

We can use formatError to format the error and send the data any way we want
This will catch all the error being thrown and then we can format the same

  {
    "errors": [
      {
        "message": "Invalid Input",
        "status": 422,
        "data": [
          {
            "message": "Email is invalid"
          }
        ]
      }
    ],
    "data": null
  }

--------------------------------------------------------------------------------------------

Accessing from Frontend:

const graphqlQuery = {
  query:`
    mutation{
      createUser(userInput: {email: "${authData.signupForm.email.value}", name: "${authData.signupForm.name.value}", password: "${authData.signupForm.password.value}"}) {
        _id
        email
      }
    }
  `
}
fetch('http://localhost:8080/graphql', {
  method: 'POST',
  body: JSON.stringify(graphqlQuery),
  headers: {
    'Content-Type': 'application/json'
  }
})

------------------------------------------------------------------------------------------------------------